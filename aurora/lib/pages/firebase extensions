import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_auth_project/auth.dart';
import 'package:flutter/material.dart';
import './auth.dart';

class HomePage extends StatelessWidget{
    HomePage({Key?key}): super(key:key);
    final User? user=Auth().currentUser;
    Future<void> signOut() async{
    await Auth().signOut();
    }
     Widget _title(){
        return const Text('Firebase Auth');
    }
    Widget _userUid(){
        return Text(user?.email??'User email');
    }
    Widget _signOutButton(){
        
            return ElevatedButton(
                onPressed:signOut,
                child: const Text('sign Out');
            );
        }
    
   
    @override
    Widget build(BuildContext context){
        return Scaffold(
            appBar:AppBar(
                title: _title(),
            ),
            body:Container(
                height: double.infinity,
                width:double.infinity,
                padding:const EdgeInSets.all(20),
                child: Column(
                    crossAlignment: CrossAxialAlignment.center,
                    mainAlignment: MainAxisAlignment.center,
                    children: <Widget>[
                        _userUid(),
                        _signOutButton(),
                    ],
                ),
            ),
        );
    }
}



class _LoginPageState extends State<LoginPage>{
  String? errorMessage ='';
  bool islogin = true;
  final TextEditingController _controllerEmail = TextEditingController();
  final TextEditingController _controllerPassword = TextEditingController();
  Future<void> signInwithEmailAndPassword() async{
    try {
      await Auth().signInWithEmailAndPassword(
        email: _controllerEmail.text,
        password: _controllerPassword.text,
       );
     } on FirebaseAuthException catch (e) {
      setState((){
        errorMessage = e.message;
      });
     }}
     Future<void> createUserwithEmailAndPassword() async {
  try {
    await Auth () createUserwithEmailAndPassword(
      email: _controllerEmail. text,
      password: _controllerPassword.text,
     );
  }on FirebaseAuthException catch (e)
    setState((){
      errorMessage = e.message;
    });}}

    Widget _title(){
  return const Text( 'Firebase Auth');
 }
Widget _entryField(
  String title,
  TextEditingController controller,
){
   return TextField(
    controller: controller,
    decoration: InputDecoration(
      labelText: title,
       // InputDecoration
  ),
  );// TextField
 }
 Widget _errorMessage() {
   return Text (errorMessage =='' ? '' : 'Humm ? $errorMessage');

 }

 Widget _submitButton() {
return ElevatedButton(
onPressed:
isLogin ? signInwWithEmailAndPassword : createUserwithEmailandPassword,
child: Text(isLogin ? 'Login' : 'Register'),
);
 }
 Widget _loginOrRegisterButton(){
    return TextButton(
        onPressed:(){
            setState((){
                isLogin=!isLogin;
            });
        },
  child: Text(isLogin ? 'Register instead' : 'Login instead'),

    );
 }
 overrideWidget build(BuildContext context){
    return Scaffold(
appBar:AppBar(
title: _title  (),
),
body:Container(
    height:double.infinity,
    width:double.infinity,
    padding: const EdgeInsets.all(20),
    child:Column(
        cro
    )
)


 



